<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Score More</title>
  <link rel="stylesheet" href="/css/styles.css">
  </head>
<body>
  <div class="wrapper">

    <div id="title">
      <h1 id="game-title">Score More</h1>
      <p id="code"></p>
      </div>

      <div id="display">
        <div id="scores">
          <p class="section-title">Score History</p>
        </div>

        <div id="players">
          <p class="section-title">Players</p>
        </div>
      </div>

      <div id="dropdowns">
        <div id="history-dropdown" class="dropdown">
          <label for="history-select">View scores of:</label><br>
          <select name="history-select" id="history-select">

          </select>
        </div>

        <div id="sort-dropdown" class="dropdown">
            <label for="score-sort">Sort Scores by:</label><br>
            <select name="score-sort" id="score-sort">
              <option value="descending" class="selection">High to Low</option>
              <option value="ascending" class="selection">Low to High</option>
            </select>
          </div>
      </div>

      <!-- Some mobile digit keyboards do not have a "-" apparently, seperate buttons for add and subtract -->
      <form id="score-form">
        <input type="number" class="input-field" id="input" autocomplete="off" required>
        <button type="submit" id="add" class="button">Add</button>
        <button type="submit" id="subtract" class="button">Subtract</button><br>
      </form>


      <!-- START JAVASCRIPT -->
      <!--        -->
      <script src="/socket.io/socket.io.js"></script>
      <script>
        // Constants for the page divs, player name and room code.
        const form = document.getElementById('score-form')
        const scoreBoard = document.getElementById('players')
        const scoreSort = document.getElementById('score-sort')
        // decodes the roomcode and player name from the url. Just in case of special characters
        const playerName = decodeURI(window.location.pathname.split('/')[3])
        const roomCode = decodeURI(window.location.pathname.split('/')[2])
        const historySelect = document.getElementById('history-select')
        const scoreHistory = document.getElementById('scores')
        // Puts the room code at the top of the room page.
        document.getElementById('code').innerText = `Room Code: ${roomCode}`

        // TODO: Maybe we can refactor some of our events to not have to pass the
        // the variables. We send the player name and roomcode in the headers. Seems like extra data, although small, maybe a scaling issue.

        // Instantiates the socket with socket.io with the playername and roomcode headers
        // Currently only using the handshake headers in the disconnecting event.
        socket = io({
          extraHeaders: {
            'playerName': playerName,
            'roomCode': roomCode
          }
        })

        // the roster that is used for the history select.
        let roster = []
        // Sets the client as the default player to get score history for.
        let selectedPlayer = playerName

        // On connecting the client emits join-room which joins them too the socket.io
        // room and gets the Redis sorted set for that room.
        socket.on('connect', () => {
          socket.emit('join-room', roomCode)
        })

        // When the server sends an updated sorted list we parse and store the roster
        // and scores. Run a for loop on the score totals and append them to the
        // scoreboard.
        socket.on('update-board', (response) => {
          let newRoster = []
          let scores = []
          let sortBy = scoreSort.value
          scoreBoard.innerHTML = '<p class="section-title">Players</p>'
          response.forEach((player) => {
            newRoster.push(player.value)
            scores.push(player.score)
          })
          // Then the "sort by" value is checked and reversed if needed,
          // the score are sent in ascending order by default.
          if (sortBy === "descending") {
            newRoster.reverse()
            scores.reverse()
          }
          //  Run a for loop on the score totals and append them to the score board.
          for (let i=0; i < scores.length; i++) {
            scoreBoard.insertAdjacentHTML('beforeend', `<p>${newRoster[i]}: ${scores[i]}</p>`)
          }
          // If the roster length has changed we update the history selection dropdown
          // with the new list of player names
          if (roster.length !== newRoster.length) {
            historySelect.innerHTML = ''
            roster = newRoster
            roster.forEach((name) => {
              historySelect.insertAdjacentHTML('beforeend', `<option value="${name}" class="selection">${name}</option>`)
            })
          }
          // Sends a request for the Redis list of scores for a given player name
          socket.emit('get-history', roomCode, selectedPlayer)
        })

        // When the server responds with a list of scores for a player the clients score
        // history section is populated with the scores in order of entry.
        socket.on('send-history', (history) => {
          let i = 1
          scoreHistory.innerHTML = `<p class="section-title">${selectedPlayer}'s Score History</p>`
          history.forEach((entry) => {
            scoreHistory.insertAdjacentHTML('beforeend', `<p>Round ${i} :[ ${entry} ]</p>`)
            i++
          })
        })

        // Emits the update score with the value entered. The server uses the player name
        // roomcode and value to update the list and sorted set for that player. Afterward
        // the server emits the update board action and resets the expiry time for the set
        form.addEventListener('submit', (e) => {
          e.preventDefault()
          const inputValue = document.getElementById('input').value
          if (e.submitter.id === "add") {
            socket.emit('update-score', roomCode, playerName, inputValue)
            document.getElementById('input').value = ''
          } else {
            socket.emit('update-score', roomCode, playerName, ("-" + inputValue))
            document.getElementById('input').value = ''
          }
        })

        // When the client changes the value of the history select dropdown,
        // the the server emits a "send-history" event that sends the list of scores
        // for that player name.
        historySelect.addEventListener('change', (e) => {
          selectedPlayer = e.target.value
          socket.emit('get-history', roomCode, selectedPlayer)
        })

        // Sends an update order event to the server that gets the sorted set
        // of that room and the server emits an update board event.
        // TODO: Maybe this event should change on server side to only emit to the
        // socket that sent the event?
        scoreSort.addEventListener('change', (e) => {
          socket.emit('update-order', roomCode)
        })
      </script>
      <!--        -->
  </div>
</body>
</html>
